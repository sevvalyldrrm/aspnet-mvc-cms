// <auto-generated />
using System;
using Cms.Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cms.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240217203754_1001")]
    partial class _1001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cms.Data.Entity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Cms.Data.Entity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "ffe6e692-a04d-483d-a24a-3746a9a49b2a",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "fd775bc3-253b-4b1a-abe5-0a573acb8e0f",
                            EmailConfirmed = false,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6808c275-993a-4e25-8e9a-94b1a9e37adb",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "e0fab7d9-08cf-4c8f-9f74-797bb189b5e6",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "7881742b-4888-4a92-ba47-5148e7d80be4",
                            EmailConfirmed = false,
                            FullName = "User One",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7af5d655-a473-488f-9035-feda7af0044e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "595b7798-181a-4a57-bbcd-99bac1de6f48",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "471d3216-147e-4caf-950f-fb0e5f336b8c",
                            EmailConfirmed = false,
                            FullName = "User Two",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ffef1df-4ae3-4c66-9c82-0bfcbd836b65",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f0cac610-41c2-4758-aeea-215e62189c2a",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "3e740d18-33c4-4446-b5b6-06463923e920",
                            EmailConfirmed = false,
                            FullName = "User Three",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e5a880e-12c7-42d5-bb36-7265e1999418",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "72bca839-1e19-430d-a329-ae62e737655e",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "bfb9bfb0-ae24-4873-a5bb-cf2be13c5335",
                            EmailConfirmed = false,
                            FullName = "User Four",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c98e1c61-8904-47a3-9a71-a647354f8fb9",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6946d5ed-65a8-4edd-b1c0-046590726e6e",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "340dd87b-756c-4bc1-b360-659f240ce12a",
                            EmailConfirmed = false,
                            FullName = "User Five",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd97ec0c-39da-4810-b113-8be6c8032083",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5739bdf1-3230-41e7-af11-de3fa143997a",
                            AccessFailedCount = 0,
                            City = "Konya",
                            ConcurrencyStamp = "1713d245-22a5-471c-b685-0e1e7bfe91fd",
                            EmailConfirmed = false,
                            FullName = "User Six",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84706ff9-4dbe-4433-9fbe-903612f5b147",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "0d667726-0b62-496e-b4c4-800314ac8297",
                            AccessFailedCount = 0,
                            City = "Gaziantep",
                            ConcurrencyStamp = "842ead80-3c94-429b-878e-59200aee583d",
                            EmailConfirmed = false,
                            FullName = "User Seven",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "922bf718-ad9a-411a-b6bf-80a409c4ffe8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "90afa8be-ebf4-412a-a5e5-ea533fda36cc",
                            AccessFailedCount = 0,
                            City = "Samsun",
                            ConcurrencyStamp = "a3dd9c81-f700-4892-b0fb-16e732f8295c",
                            EmailConfirmed = false,
                            FullName = "User Eight",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bed71e6e-2de9-4649-8512-2ea54f5cc229",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "b38bd881-8cea-40f4-b69f-48e42fd6f4d6",
                            AccessFailedCount = 0,
                            City = "Kayseri",
                            ConcurrencyStamp = "d8faf6db-e1d7-4ffa-ab6d-8d24efcbae45",
                            EmailConfirmed = false,
                            FullName = "User Nine",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df25cb27-5516-40a7-bc4e-78de3acffe26",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Cms.Data.Entity.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DoctorId1");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Cms.Data.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Teknoloji ile ilgili haberler",
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Spor haberleri",
                            Name = "Spor"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sağlık ve yaşam tarzı ile ilgili bilgiler",
                            Name = "Sağlık"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Eğitim dünyasından haberler ve ipuçları",
                            Name = "Eğitim"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ekonomi ve finans dünyasına dair güncel bilgiler",
                            Name = "Ekonomi"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Seyahat ipuçları ve destinasyon önerileri",
                            Name = "Seyahat"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Sanat dünyasından son gelişmeler",
                            Name = "Sanat"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Moda dünyasından en son trendler",
                            Name = "Moda"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Yemek kültürü ve gastronomi haberleri",
                            Name = "Gastronomi"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Teknolojideki son yenilikler ve icatlar",
                            Name = "Teknoloji Yenilikleri"
                        });
                });

            modelBuilder.Entity("Cms.Data.Entity.CategoryPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PostId");

                    b.ToTable("CategoryPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            PostId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            PostId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            PostId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            PostId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            PostId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            PostId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            PostId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            PostId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            PostId = 9
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            PostId = 10
                        });
                });

            modelBuilder.Entity("Cms.Data.Entity.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Bu sayfa şirketimiz hakkında bilgiler içerir.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1333),
                            IsActive = true,
                            Title = "Hakkımızda",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1333)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Şirketimizin misyonunu bu sayfada bulabilirsiniz.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1335),
                            IsActive = true,
                            Title = "Misyonumuz",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1336)
                        },
                        new
                        {
                            Id = 3,
                            Content = "Gelecek vizyonumuz hakkında bilgi alın.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1338),
                            IsActive = true,
                            Title = "Vizyonumuz",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1338)
                        },
                        new
                        {
                            Id = 4,
                            Content = "Kariyer olanaklarımız hakkında bilgi alın.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1341),
                            IsActive = true,
                            Title = "Kariyer",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1342)
                        },
                        new
                        {
                            Id = 5,
                            Content = "Bizimle iletişim bilgileri.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1344),
                            IsActive = true,
                            Title = "İletişim",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1344)
                        },
                        new
                        {
                            Id = 6,
                            Content = "Basın bültenlerimiz ve haberler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1347),
                            IsActive = true,
                            Title = "Basın Odası",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1347)
                        },
                        new
                        {
                            Id = 7,
                            Content = "Yatırımcılar için önemli bilgiler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1350),
                            IsActive = true,
                            Title = "Yatırımcı İlişkileri",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1350)
                        },
                        new
                        {
                            Id = 8,
                            Content = "Topluma katkıda bulunduğumuz projeler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1352),
                            IsActive = true,
                            Title = "Sosyal Sorumluluk Projeleri",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1352)
                        },
                        new
                        {
                            Id = 9,
                            Content = "Müşterilerimizin sık sorduğu sorular.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1354),
                            IsActive = true,
                            Title = "Sıkça Sorulan Sorular",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1354)
                        },
                        new
                        {
                            Id = 10,
                            Content = "Gizlilik ve veri koruma politikamız.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1355),
                            IsActive = true,
                            Title = "Gizlilik Politikası",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1356)
                        });
                });

            modelBuilder.Entity("Cms.Data.Entity.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            Content = "Yeni teknolojiler hakkında bilgiler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(935),
                            Title = "Yeni Teknolojiler",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(948)
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 1,
                            Content = "Spor dünyasından son gelişmeler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(954),
                            Title = "Spor Dünyası",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(954)
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 9,
                            Content = "Sağlıklı yaşam için ipuçları.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(956),
                            Title = "Sağlıklı Yaşam",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(957)
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 2,
                            Content = "Eğitim alanında yaşanan son gelişmeler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(959),
                            Title = "Eğitimde Yenilikler",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(959)
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 8,
                            Content = "Dünya ekonomisine genel bir bakış.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(961),
                            Title = "Ekonomi Analizi",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(962)
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 3,
                            Content = "Keşfedilecek yeni yerler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(963),
                            Title = "Seyahat Rehberi",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(964)
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 4,
                            Content = "Sanat dünyasından haberler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(965),
                            Title = "Sanatın Kalbi",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(966)
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 5,
                            Content = "Moda dünyasının nabzı.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(967),
                            Title = "Moda Dünyasında Neler Oluyor?",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(968)
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 6,
                            Content = "Gastronomi dünyasından lezzetli haberler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(969),
                            Title = "Gastronomi Keşifleri",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(970)
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 7,
                            Content = "Teknolojideki son gelişmeler ve inovasyonlar.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(971),
                            Title = "Teknolojik Gelişmeler",
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(972)
                        });
                });

            modelBuilder.Entity("Cms.Data.Entity.PostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("AppUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId1");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            Comment = "Harika bir yazı!",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1229),
                            IsActive = true,
                            PostId = 1,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1230)
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2,
                            Comment = "Çok bilgilendirici, teşekkürler.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1233),
                            IsActive = true,
                            PostId = 1,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1233)
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3,
                            Comment = "Bu konuda daha fazla bilgi bekliyorum.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1235),
                            IsActive = true,
                            PostId = 1,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1236)
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4,
                            Comment = "Sporla ilgili bu tür yazıları seviyorum.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1238),
                            IsActive = true,
                            PostId = 2,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1238)
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5,
                            Comment = "Yazarın bakış açısını beğendim.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1240),
                            IsActive = true,
                            PostId = 2,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1240)
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 6,
                            Comment = "Faydalı bir yazı olmuş.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1242),
                            IsActive = true,
                            PostId = 2,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1242)
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 7,
                            Comment = "Teknolojinin geldiği nokta gerçekten şaşırtıcı.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1244),
                            IsActive = true,
                            PostId = 1,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1244)
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 8,
                            Comment = "Yazar bu konuda çok iyi bilgi sahibi.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1246),
                            IsActive = true,
                            PostId = 1,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1246)
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 9,
                            Comment = "Spor haberlerini takip etmeyi seviyorum.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1248),
                            IsActive = true,
                            PostId = 2,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1248)
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 10,
                            Comment = "Daha fazla spor içeriği görmek isterim.",
                            CreatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1250),
                            IsActive = true,
                            PostId = 3,
                            UpdatedAt = new DateTime(2024, 2, 17, 23, 37, 53, 903, DateTimeKind.Local).AddTicks(1250)
                        });
                });

            modelBuilder.Entity("Cms.Data.Entity.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImages");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ImagePath = "images/post2.jpg",
                            PostId = 1
                        },
                        new
                        {
                            Id = 1,
                            ImagePath = "images/post1.jpg",
                            PostId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "images/post3.jpg",
                            PostId = 1
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "images/post4.jpg",
                            PostId = 2
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "images/post5.jpg",
                            PostId = 2
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "images/post6.jpg",
                            PostId = 2
                        },
                        new
                        {
                            Id = 7,
                            ImagePath = "images/post7.jpg",
                            PostId = 3
                        },
                        new
                        {
                            Id = 8,
                            ImagePath = "images/post8.jpg",
                            PostId = 3
                        },
                        new
                        {
                            Id = 9,
                            ImagePath = "images/post9.jpg",
                            PostId = 4
                        },
                        new
                        {
                            Id = 10,
                            ImagePath = "images/post10.jpg",
                            PostId = 5
                        });
                });

            modelBuilder.Entity("Cms.Data.Entity.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tema",
                            UserId = 1,
                            Value = "Koyu"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dil",
                            UserId = 1,
                            Value = "Türkçe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tema",
                            UserId = 2,
                            Value = "Açık"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dil",
                            UserId = 2,
                            Value = "İngilizce"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tema",
                            UserId = 3,
                            Value = "Koyu"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dil",
                            UserId = 3,
                            Value = "Türkçe"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Tema",
                            UserId = 4,
                            Value = "Açık"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dil",
                            UserId = 4,
                            Value = "İngilizce"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tema",
                            UserId = 5,
                            Value = "Koyu"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Dil",
                            UserId = 5,
                            Value = "Türkçe"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cms.Data.Entity.Doctor", b =>
                {
                    b.HasBaseType("Cms.Data.Entity.AppUser");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Speacialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Cms.Data.Entity.Patient", b =>
                {
                    b.HasBaseType("Cms.Data.Entity.AppUser");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDischarged")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("RoleId")
                                .HasColumnName("Patient_RoleId");
                        });

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Cms.Data.Entity.Appointment", b =>
                {
                    b.HasOne("Cms.Data.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Data.Entity.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId1");

                    b.Navigation("Category");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Cms.Data.Entity.CategoryPost", b =>
                {
                    b.HasOne("Cms.Data.Entity.Category", "Category")
                        .WithMany("CategoryPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Data.Entity.Post", "Post")
                        .WithMany("CategoryPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Cms.Data.Entity.PostComment", b =>
                {
                    b.HasOne("Cms.Data.Entity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId1");

                    b.HasOne("Cms.Data.Entity.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Cms.Data.Entity.PostImage", b =>
                {
                    b.HasOne("Cms.Data.Entity.Post", null)
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Cms.Data.Entity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cms.Data.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cms.Data.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Cms.Data.Entity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Data.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cms.Data.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cms.Data.Entity.Doctor", b =>
                {
                    b.HasOne("Cms.Data.Entity.Category", "Category")
                        .WithOne("Doctor")
                        .HasForeignKey("Cms.Data.Entity.Doctor", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Data.Entity.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Category");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cms.Data.Entity.Patient", b =>
                {
                    b.HasOne("Cms.Data.Entity.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId1");

                    b.HasOne("Cms.Data.Entity.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Doctor");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cms.Data.Entity.Category", b =>
                {
                    b.Navigation("CategoryPosts");

                    b.Navigation("Doctor")
                        .IsRequired();
                });

            modelBuilder.Entity("Cms.Data.Entity.Post", b =>
                {
                    b.Navigation("CategoryPosts");

                    b.Navigation("PostComments");

                    b.Navigation("PostImages");
                });

            modelBuilder.Entity("Cms.Data.Entity.Doctor", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
